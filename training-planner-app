<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Training Planner</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body { font-family: 'Inter', sans-serif; }
        .view { display: none; }
        .view.active { display: block; }
        .nav-item.active svg, .nav-item.active span { color: #3b82f6; }
        .calendar-day-month-view { min-height: 80px; }
        .calendar-day-month-view.other-month { background-color: #1f2937; } /* bg-gray-800 */
        .session-dot { width: 6px; height: 6px; border-radius: 50%; display: inline-block; }
        .calendar-view-btn.active { background-color: #3b82f6; color: white; }
        details > summary { list-style: none; }
        details > summary::-webkit-details-marker { display: none; }
        #app-container, #auth-container {
            display: none;
        }
    </style>
</head>
<body class="bg-gray-900 text-white">

    <!-- Authentication View -->
    <div id="auth-container" class="container mx-auto max-w-lg h-screen flex flex-col justify-center p-4">
        <div class="bg-gray-800 p-8 rounded-lg shadow-lg text-center">
            <h1 class="text-3xl font-bold mb-2">Training Planner</h1>
            <p class="text-gray-400 mb-6">Log in to continue</p>
            <div id="auth-view-login">
                <form id="login-form" class="space-y-4">
                    <input type="email" id="login-email" placeholder="Email" required class="w-full bg-gray-700 p-3 rounded-md border border-gray-600">
                    <input type="password" id="login-password" placeholder="Password" required class="w-full bg-gray-700 p-3 rounded-md border border-gray-600">
                    <button type="submit" class="w-full py-3 bg-blue-600 hover:bg-blue-700 rounded-md font-semibold">Log In</button>
                </form>
                <p id="login-error" class="text-red-500 text-sm mt-2"></p>
                <div class="my-4 text-gray-500">or</div>
                <button id="google-signin-btn" class="w-full py-3 bg-white text-gray-800 rounded-md font-semibold flex items-center justify-center gap-2 hover:bg-gray-200">
                    <svg class="w-5 h-5" viewBox="0 0 48 48"><path fill="#4285F4" d="M43.611 20.083H42V20H24v8h11.303c-1.649 4.657-6.08 8-11.303 8c-6.627 0-12-5.373-12-12s5.373-12 12-12c3.059 0 5.842 1.154 7.961 3.039l5.657-5.657C34.046 6.053 29.268 4 24 4C12.955 4 4 12.955 4 24s8.955 20 20 20s20-8.955 20-20c0-1.341-.138-2.65-.389-3.917z"></path><path fill="#34A853" d="M6.306 14.691l6.571 4.819C14.655 15.108 18.961 12 24 12c3.059 0 5.842 1.154 7.961 3.039l5.657-5.657C34.046 6.053 29.268 4 24 4C16.318 4 9.656 8.337 6.306 14.691z"></path><path fill="#FBBC05" d="M27.58 45.92l-6.571-4.819C19.044 42.902 14.968 44 12 44c-6.627 0-12-5.373-12-12s5.373-12 12-12c3.059 0 5.842 1.154 7.961 3.039l5.657-5.657C34.046 6.053 29.268 4 24 4C16.318 4 9.656 8.337 6.306 14.691z"></path><path fill="#EA4335" d="M43.611 20.083H42V20H24v8h11.303c-1.649 4.657-6.08 8-11.303 8c-6.627 0-12-5.373-12-12s5.373-12 12-12c3.059 0 5.842 1.154 7.961 3.039l5.657-5.657C34.046 6.053 29.268 4 24 4C12.955 4 4 12.955 4 24s8.955 20 20 20s20-8.955 20-20c0-1.341-.138-2.65-.389-3.917z"></path></svg>
                    Sign in with Google
                </button>
                <p class="mt-6 text-sm">Don't have an account? <button id="show-signup-btn" class="font-semibold text-blue-400 hover:underline">Sign Up</button></p>
            </div>
            <div id="auth-view-signup" class="hidden">
                <form id="signup-form" class="space-y-4">
                    <input type="email" id="signup-email" placeholder="Email" required class="w-full bg-gray-700 p-3 rounded-md border border-gray-600">
                    <input type="password" id="signup-password" placeholder="Password" required class="w-full bg-gray-700 p-3 rounded-md border border-gray-600">
                    <button type="submit" class="w-full py-3 bg-blue-600 hover:bg-blue-700 rounded-md font-semibold">Sign Up</button>
                </form>
                <p id="signup-error" class="text-red-500 text-sm mt-2"></p>
                <p class="mt-6 text-sm">Already have an account? <button id="show-login-btn" class="font-semibold text-blue-400 hover:underline">Log In</button></p>
            </div>
        </div>
    </div>

    <!-- Main App Container -->
    <div id="app-container" class="container mx-auto max-w-lg h-screen flex-col">
        <!-- Header -->
        <header class="p-4 text-center sticky top-0 bg-gray-900 z-10 flex justify-between items-center">
            <h1 id="header-title" class="text-2xl font-bold text-gray-100">Log Session</h1>
            <button data-action="logout" class="text-sm text-gray-300 hover:text-white">Logout</button>
        </header>

        <!-- Main Content Area -->
        <main class="flex-grow p-4 overflow-y-auto">
            <div id="log-view" class="view active">
                <div class="space-y-6">
                    <button type="button" data-action="log-wellness" class="w-full flex justify-center items-center gap-2 py-3 px-4 border border-dashed border-teal-500 rounded-md shadow-sm text-sm font-medium text-teal-400 bg-teal-900/50 hover:bg-teal-900/80">
                        Log Today's Wellness
                    </button>
                    <hr class="border-gray-700">
                    <h2 class="text-center text-lg font-semibold text-gray-300">Log a Training Session</h2>
                    <form id="training-form" class="space-y-6">
                        <input type="hidden" id="session-id" name="sessionId">
                        <div>
                            <label for="date" class="block text-sm font-medium text-gray-300">Date</label>
                            <input type="date" id="date" name="date" required class="mt-1 block w-full bg-gray-800 border-gray-700 rounded-md shadow-sm p-3 text-white">
                        </div>
                        <div class="grid grid-cols-2 gap-4">
                            <div>
                                <label for="category" class="block text-sm font-medium text-gray-300">Category</label>
                                <select id="category" name="category" required class="mt-1 block w-full bg-gray-800 border-gray-700 rounded-md shadow-sm p-3 text-white"></select>
                            </div>
                            <div>
                                <label for="subcategory" class="block text-sm font-medium text-gray-300">Sub-category</label>
                                <select id="subcategory" name="subcategory" required class="mt-1 block w-full bg-gray-800 border-gray-700 rounded-md shadow-sm p-3 text-white"></select>
                            </div>
                        </div>
                        <div id="dynamic-fields-container" class="space-y-4 pt-4 border-t border-gray-700"></div>
                        <div>
                            <label for="details" class="block text-sm font-medium text-gray-300">General Notes</label>
                            <textarea id="details" name="details" rows="2" class="mt-1 block w-full bg-gray-800 border-gray-700 rounded-md shadow-sm p-3 text-white" placeholder="Any general thoughts on the session..."></textarea>
                        </div>
                        <h3 class="text-lg font-semibold pt-4 border-t border-gray-700">Session Feel</h3>
                        <div>
                            <label for="sessionRating" class="block text-sm font-medium text-gray-300">Session Rating (1-10)</label>
                            <input type="number" id="sessionRating" name="sessionRating" min="1" max="10" class="mt-1 block w-full bg-gray-800 border-gray-700 rounded-md shadow-sm p-3 text-white" placeholder="How you felt">
                        </div>
                        <div>
                            <button type="submit" class="w-full flex justify-center py-3 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700">
                                Save Session
                            </button>
                        </div>
                    </form>
                </div>
            </div>
            <div id="calendar-view" class="view">
                <div class="flex items-center justify-between mb-4">
                    <button data-action="prev-period" class="p-2 rounded-md bg-gray-700 hover:bg-gray-600" aria-label="Previous Period">&lt;</button>
                    <h2 id="calendar-title" class="text-xl font-semibold"></h2>
                    <button data-action="next-period" class="p-2 rounded-md bg-gray-700 hover:bg-gray-600" aria-label="Next Period">&gt;</button>
                </div>
                <div class="flex justify-center mb-4 bg-gray-800 rounded-md p-1">
                    <button data-action="set-calendar-view" data-view-type="month" class="calendar-view-btn flex-1 text-sm py-1 px-3 rounded-md active">Month</button>
                    <button data-action="set-calendar-view" data-view-type="week" class="calendar-view-btn flex-1 text-sm py-1 px-3 rounded-md">Week</button>
                    <button data-action="set-calendar-view" data-view-type="day" class="calendar-view-btn flex-1 text-sm py-1 px-3 rounded-md">Day</button>
                </div>
                <div id="calendar-container"></div>
            </div>
            <div id="history-view" class="view">
                <div id="history-list" class="space-y-4"></div>
            </div>
            <div id="dashboard-view" class="view">
                <div class="space-y-6" id="dashboard-content"></div>
            </div>
        </main>

        <!-- Bottom Navigation -->
        <nav class="bg-gray-800 p-2 shadow-lg rounded-t-xl sticky bottom-0">
            <div class="flex justify-around">
                <button data-view="log-view" class="nav-item flex flex-col items-center text-gray-300 hover:text-white transition active">
                    <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" /></svg>
                    <span class="text-xs">Log</span>
                </button>
                <button data-view="calendar-view" class="nav-item flex flex-col items-center text-gray-300 hover:text-white transition">
                    <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" /></svg>
                    <span class="text-xs">Calendar</span>
                </button>
                <button data-view="history-view" class="nav-item flex flex-col items-center text-gray-300 hover:text-white transition">
                    <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v11.494m-9-5.747h18" /></svg>
                    <span class="text-xs">History</span>
                </button>
                <button data-view="dashboard-view" class="nav-item flex flex-col items-center text-gray-300 hover:text-white transition">
                    <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 012-2h2a2 2 0 012 2v6m-6 0h6M9 19a2 2 0 00-2 2h10a2 2 0 00-2-2M9 19V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" /></svg>
                    <span class="text-xs">Dashboard</span>
                </button>
            </div>
        </nav>
    </div>

    <!-- Modals -->
    <div id="modal-backdrop" class="hidden fixed inset-0 bg-black bg-opacity-75 z-40"></div>
    <div id="wellness-modal" role="dialog" aria-modal="true" class="hidden fixed inset-0 flex items-center justify-center z-50 p-4">
        <div class="bg-gray-800 rounded-lg shadow-xl p-6 text-left max-w-sm w-full space-y-4">
            <h3 class="text-lg leading-6 font-medium text-white">Log Daily Wellness</h3>
            <form id="wellness-form">
                <input type="hidden" id="wellness-date">
                <div>
                    <label for="wellness-sleep" class="block text-sm font-medium text-gray-300">Sleep (hours)</label>
                    <input type="number" step="0.5" id="wellness-sleep" class="mt-1 block w-full bg-gray-700 border-gray-600 rounded-md p-3" placeholder="e.g., 7.5">
                </div>
                <div class="mt-4">
                    <label for="wellness-weight" class="block text-sm font-medium text-gray-300">Weight (kg)</label>
                    <input type="number" step="0.1" id="wellness-weight" class="mt-1 block w-full bg-gray-700 border-gray-600 rounded-md p-3" placeholder="e.g., 68.5">
                </div>
                <div class="mt-4">
                    <label for="wellness-calories" class="block text-sm font-medium text-gray-300">Calories (kcal)</label>
                    <input type="number" id="wellness-calories" class="mt-1 block w-full bg-gray-700 border-gray-600 rounded-md p-3" placeholder="e.g., 2500">
                </div>
                <div class="flex justify-end gap-3 mt-6">
                    <button type="button" data-action="close-modal" class="py-2 px-4 rounded-md text-sm font-medium text-gray-300 bg-gray-700 hover:bg-gray-600">Cancel</button>
                    <button type="submit" class="py-2 px-4 rounded-md text-sm font-medium text-white bg-teal-600 hover:bg-teal-700">Save Wellness</button>
                </div>
            </form>
        </div>
    </div>
    <div id="day-detail-modal" role="dialog" aria-modal="true" class="hidden fixed inset-0 flex items-center justify-center z-50 p-4">
        <div class="bg-gray-800 rounded-lg shadow-xl p-6 text-left max-w-sm w-full space-y-4">
            <div class="flex justify-between items-start">
                <h3 id="day-detail-title" class="text-lg leading-6 font-medium text-white"></h3>
                <button data-action="close-modal" class="text-gray-400 hover:text-white text-2xl" aria-label="Close dialog">&times;</button>
            </div>
            <div id="day-detail-content" class="space-y-3 max-h-64 overflow-y-auto"></div>
            <button data-action="add-session-for-date" class="w-full mt-4 py-2 px-4 rounded-md text-sm font-medium text-white bg-blue-600 hover:bg-blue-700">Add New Session</button>
        </div>
    </div>

    <script type="module">
        // Import Firebase modules
        import { initializeApp } from "https://www.gstatic.com/firebasejs/9.19.1/firebase-app.js";
        import { getAuth, onAuthStateChanged, createUserWithEmailAndPassword, signInWithEmailAndPassword, signInWithPopup, GoogleAuthProvider, signOut } from "https://www.gstatic.com/firebasejs/9.19.1/firebase-auth.js";
        import { getFirestore, collection, doc, setDoc, onSnapshot, deleteDoc, query, orderBy } from "https://www.gstatic.com/firebasejs/9.19.1/firebase-firestore.js";

        // --- PASTE YOUR FIREBASE CONFIG HERE ---
        const firebaseConfig = {
            apiKey: "AIzaSyBlafuTrE0PMRHMpEjU-wWYVvXcJbpY8Ek",
            authDomain: "training-planner-812f0.firebaseapp.com",
            projectId: "training-planner-812f0",
            storageBucket: "training-planner-812f0.appspot.com",
            messagingSenderId: "554442101604",
            appId: "1:554442101604:web:1bd5c5a6d0061638fca071",
            measurementId: "G-JWXX5GV093"
        };

        // Initialize Firebase
        const app = initializeApp(firebaseConfig);
        const auth = getAuth(app);
        const db = getFirestore(app);

        // --- DATA & CONFIG ---
        const trainingConfig = {
            "Climbing": { "Bouldering": { type: 'bouldering' }, "Sport Climbing": { type: 'sport' }, "Endurance": { type: 'endurance' }, "Training Board": { type: 'generic' } },
            "Weights": { "Strength": { type: 'weights' }, "Hypertrophy": { type: 'weights' }, "Power": { type: 'weights' } },
            "Running": { "Road": { type: 'running' }, "Trail": { type: 'running' }, "Track": { type: 'running' } },
            "Other": { "Yoga": { type: 'generic' }, "Stretching": { type: 'generic' }, "Mobility": { type: 'generic' } }
        };
        let sessions = [];
        let dailyWellness = [];
        let currentUserId = null;
        let listeners = [];
        let currentCalendarDate = new Date();
        let currentCalendarView = 'month';
        const charts = {};

        // --- ELEMENT SELECTORS ---
        const authContainer = document.getElementById('auth-container');
        const appContainer = document.getElementById('app-container');
        const loginForm = document.getElementById('login-form');
        const signupForm = document.getElementById('signup-form');
        const googleSigninBtn = document.getElementById('google-signin-btn');
        const showSignupBtn = document.getElementById('show-signup-btn');
        const showLoginBtn = document.getElementById('show-login-btn');
        const loginError = document.getElementById('login-error');
        const signupError = document.getElementById('signup-error');
        const headerTitle = document.getElementById('header-title');
        const navButtons = document.querySelectorAll('.nav-item');
        const views = document.querySelectorAll('.view');
        const form = document.getElementById('training-form');
        const sessionIdInput = document.getElementById('session-id');
        const dateInput = document.getElementById('date');
        const categorySelect = document.getElementById('category');
        const subcategorySelect = document.getElementById('subcategory');
        const dynamicFieldsContainer = document.getElementById('dynamic-fields-container');
        const wellnessForm = document.getElementById('wellness-form');
        const modalBackdrop = document.getElementById('modal-backdrop');
        const wellnessModal = document.getElementById('wellness-modal');
        const dayDetailModal = document.getElementById('day-detail-modal');
        const calendarContainer = document.getElementById('calendar-container');
        const calendarTitle = document.getElementById('calendar-title');
        const historyList = document.getElementById('history-list');
        const dashboardContent = document.getElementById('dashboard-content');
        
        // --- AUTHENTICATION LOGIC ---
        onAuthStateChanged(auth, user => {
            if (user) {
                currentUserId = user.uid;
                authContainer.style.display = 'none';
                appContainer.style.display = 'flex';
                initializeAppData();
            } else {
                currentUserId = null;
                authContainer.style.display = 'flex';
                appContainer.style.display = 'none';
                // Unsubscribe from all listeners on logout
                listeners.forEach(unsub => unsub());
                listeners = [];
                sessions = [];
                dailyWellness = [];
            }
        });

        loginForm.addEventListener('submit', e => {
            e.preventDefault();
            const email = loginForm['login-email'].value;
            const password = loginForm['login-password'].value;
            signInWithEmailAndPassword(auth, email, password)
                .catch(error => { loginError.textContent = error.message; });
        });

        signupForm.addEventListener('submit', e => {
            e.preventDefault();
            const email = signupForm['signup-email'].value;
            const password = signupForm['signup-password'].value;
            createUserWithEmailAndPassword(auth, email, password)
                .catch(error => { signupError.textContent = error.message; });
        });

        googleSigninBtn.addEventListener('click', () => {
            const provider = new GoogleAuthProvider();
            signInWithPopup(auth, provider).catch(error => {
                loginError.textContent = "Google Sign-In failed: " + error.message;
            });
        });

        showSignupBtn.addEventListener('click', () => {
            document.getElementById('auth-view-login').classList.add('hidden');
            document.getElementById('auth-view-signup').classList.remove('hidden');
        });

        showLoginBtn.addEventListener('click', () => {
            document.getElementById('auth-view-login').classList.remove('hidden');
            document.getElementById('auth-view-signup').classList.add('hidden');
        });

        // --- DATA STORE (Firebase) ---
        function initializeAppData() {
            if (!currentUserId) return;
            
            const sessionsRef = collection(db, 'users', currentUserId, 'sessions');
            const sessionsUnsubscribe = onSnapshot(query(sessionsRef, orderBy('date', 'desc')), snapshot => {
                sessions = snapshot.docs.map(doc => ({ ...doc.data(), id: doc.id }));
                rerenderCurrentView();
            });
            listeners.push(sessionsUnsubscribe);

            const wellnessRef = collection(db, 'users', currentUserId, 'wellness');
            const wellnessUnsubscribe = onSnapshot(wellnessRef, snapshot => {
                dailyWellness = snapshot.docs.map(doc => ({ date: doc.id, ...doc.data() }));
                rerenderCurrentView();
            });
            listeners.push(wellnessUnsubscribe);
        }

        async function saveSession(sessionData) {
            if (!currentUserId) return;
            const docRef = doc(db, 'users', currentUserId, 'sessions', String(sessionData.id));
            await setDoc(docRef, sessionData, { merge: true });
        }

        async function saveWellness(wellnessData) {
            if (!currentUserId) return;
            const docRef = doc(db, 'users', currentUserId, 'wellness', wellnessData.date);
            await setDoc(docRef, wellnessData, { merge: true });
        }

        // --- CORE APP LOGIC ---
        function initialize() {
            populateCategoryDropdown();
            categorySelect.addEventListener('change', updateSubcategoryDropdown);
            subcategorySelect.addEventListener('change', () => renderDynamicFields(null));
            navButtons.forEach(btn => btn.addEventListener('click', handleNavClick));
            form.addEventListener('submit', handleFormSubmit);
            wellnessForm.addEventListener('submit', handleWellnessSubmit);
            document.body.addEventListener('click', handleAppClick);
            switchView('log-view');
            resetForm();
        }

        function handleNavClick(e) { switchView(e.currentTarget.dataset.view); }
        
        function switchView(viewId, context = null) {
            views.forEach(v => v.classList.remove('active'));
            document.getElementById(viewId).classList.add('active');
            navButtons.forEach(b => b.classList.toggle('active', b.dataset.view === viewId));

            const viewTitles = { 'log-view': 'Log/Edit', 'calendar-view': 'Calendar', 'history-view': 'History', 'dashboard-view': 'Dashboard' };
            headerTitle.textContent = viewTitles[viewId];

            if (viewId === 'log-view') {
                if (context?.sessionId) {
                    headerTitle.textContent = 'Edit Session';
                    populateFormForEdit(context.sessionId);
                } else {
                    headerTitle.textContent = 'Log Session';
                    resetForm();
                    if(context?.date) dateInput.value = context.date;
                }
            } else {
                rerenderCurrentView();
            }
        }

        function rerenderCurrentView() {
            const activeView = document.querySelector('.view.active');
            if (!activeView) return;
            if (activeView.id === 'history-view') renderHistoryList();
            if (activeView.id === 'calendar-view') renderCalendar();
            if (activeView.id === 'dashboard-view') renderDashboard();
        }

        function resetForm() {
            form.reset();
            sessionIdInput.value = '';
            dateInput.value = new Date().toLocaleDateString('sv-SE');
            updateSubcategoryDropdown();
            renderDynamicFields(null);
        }

        function populateCategoryDropdown() {
            categorySelect.innerHTML = '<option value="">Select Category</option>';
            Object.keys(trainingConfig).forEach(cat => {
                categorySelect.innerHTML += `<option value="${cat}">${cat}</option>`;
            });
        }

        function updateSubcategoryDropdown() {
            const category = categorySelect.value;
            subcategorySelect.innerHTML = '<option value="">Select Sub-category</option>';
            if (category && trainingConfig[category]) {
                Object.keys(trainingConfig[category]).forEach(subcat => {
                    subcategorySelect.innerHTML += `<option value="${subcat}">${subcat}</option>`;
                });
            }
            renderDynamicFields(null);
        }

        function renderDynamicFields(data) {
            const category = categorySelect.value;
            const subcategory = subcategorySelect.value;
            dynamicFieldsContainer.innerHTML = '';
            if (!category || !subcategory) return;

            const fieldType = trainingConfig[category][subcategory].type;
            let finalHtml = '';

            if (category === 'Climbing') {
                finalHtml += `<div><label class="text-sm text-gray-300">Venue</label><select name="venue" class="mt-1 w-full bg-gray-700 p-2 rounded"><option value="Indoors" ${data?.venue === 'Indoors' ? 'selected' : ''}>Indoors</option><option value="Outdoors" ${data?.venue === 'Outdoors' ? 'selected' : ''}>Outdoors</option></select></div>`;
                const wu = data?.warmup || {};
                finalHtml += `
                    <details class="bg-gray-800/50 rounded-md">
                        <summary class="p-2 cursor-pointer font-semibold text-sm text-gray-300">Warmup Details</summary>
                        <div class="p-3 border-t border-gray-700 space-y-3">
                            <div>
                                <p class="text-sm font-medium">Pullups</p>
                                <div class="grid grid-cols-3 gap-2 mt-1">
                                    <input type="number" name="warmupPullupsSets" placeholder="Sets" class="bg-gray-700 p-2 rounded" value="${wu.pullups?.sets || ''}">
                                    <input type="number" name="warmupPullupsReps" placeholder="Reps" class="bg-gray-700 p-2 rounded" value="${wu.pullups?.reps || ''}">
                                    <input type="number" name="warmupPullupsWeight" placeholder="Weight (kg)" class="bg-gray-700 p-2 rounded" value="${wu.pullups?.weight || ''}">
                                </div>
                            </div>
                            <div>
                                <p class="text-sm font-medium">Fingerboard</p>
                                <div class="grid grid-cols-3 gap-2 mt-1">
                                    <input type="number" name="warmupFingerboardSets" placeholder="Sets" class="bg-gray-700 p-2 rounded" value="${wu.fingerboard?.sets || ''}">
                                    <input type="number" name="warmupFingerboardReps" placeholder="Reps" class="bg-gray-700 p-2 rounded" value="${wu.fingerboard?.reps || ''}">
                                    <input type="number" name="warmupFingerboardWeight" placeholder="Weight (kg)" class="bg-gray-700 p-2 rounded" value="${wu.fingerboard?.weight || ''}">
                                </div>
                            </div>
                        </div>
                    </details>
                `;
            }

            if (fieldType !== 'running') {
                finalHtml += `<div><label class="text-sm text-gray-300">Duration (min)</label><input type="number" name="duration" class="mt-1 w-full bg-gray-700 p-2 rounded" value="${data?.duration || ''}"></div>`;
            }

            switch (fieldType) {
                case 'running':
                    finalHtml += `
                        <div class="grid grid-cols-2 gap-4">
                            <div><label class="text-sm text-gray-300">Distance (km)</label><input type="number" step="0.1" name="distance" class="mt-1 w-full bg-gray-700 p-2 rounded" value="${data?.distance || ''}"></div>
                            <div><label class="text-sm text-gray-300">Duration (min)</label><input type="number" name="duration" class="mt-1 w-full bg-gray-700 p-2 rounded" value="${data?.duration || ''}"></div>
                            <div><label class="text-sm text-gray-300">Avg Pace (min/km)</label><input type="text" name="pace" class="mt-1 w-full bg-gray-700 p-2 rounded" value="${data?.pace || ''}"></div>
                            <div><label class="text-sm text-gray-300">Avg HR</label><input type="number" name="avgHR" class="mt-1 w-full bg-gray-700 p-2 rounded" value="${data?.avgHR || ''}"></div>
                            <div><label class="text-sm text-gray-300">Elevation (m)</label><input type="number" name="elevationGain" class="mt-1 w-full bg-gray-700 p-2 rounded" value="${data?.elevationGain || ''}"></div>
                        </div>`;
                    break;
                case 'weights':
                    finalHtml += `<div id="exercises-list" class="space-y-3"></div>
                                <button type="button" data-action="add-exercise" class="text-sm text-blue-400 hover:text-blue-300">+ Add Exercise</button>`;
                    dynamicFieldsContainer.innerHTML = finalHtml;
                    const list = document.getElementById('exercises-list');
                    (data?.exercises || [{}]).forEach(ex => list.appendChild(createExerciseRow(ex)));
                    return;
                case 'bouldering':
                    finalHtml += `<label class="text-sm text-gray-300">Problems per Grade</label><div id="bouldering-grades" class="space-y-2"></div>
                                <button type="button" data-action="add-boulder-grade" class="text-sm text-blue-400 hover:text-blue-300">+ Add Grade</button>`;
                    dynamicFieldsContainer.innerHTML = finalHtml;
                    const gradeList = document.getElementById('bouldering-grades');
                    const grades = data?.grades || {};
                    if (Object.keys(grades).length > 0) {
                        Object.entries(grades).forEach(([grade, count]) => gradeList.appendChild(createBoulderGradeRow(grade, count)));
                    } else {
                        gradeList.appendChild(createBoulderGradeRow());
                    }
                    return;
                case 'sport':
                     finalHtml += `<div><label class="text-sm text-gray-300">Climbing Type</label><select name="type" class="mt-1 w-full bg-gray-700 p-2 rounded"><option value="Lead" ${data?.type === 'Lead' ? 'selected' : ''}>Lead</option><option value="Top Rope" ${data?.type === 'Top Rope' ? 'selected' : ''}>Top Rope</option></select></div>
                                <div id="routes-list" class="space-y-3"></div>
                                <button type="button" data-action="add-route" class="text-sm text-blue-400 hover:text-blue-300">+ Add Route</button>`;
                    dynamicFieldsContainer.innerHTML = finalHtml;
                    const routeList = document.getElementById('routes-list');
                    (data?.routes || [{}]).forEach(r => routeList.appendChild(createRouteRow(r)));
                    return;
            }
            dynamicFieldsContainer.innerHTML = finalHtml;
        }
        
        function createExerciseRow(data = {}) {
            const div = document.createElement('div');
            div.className = 'grid grid-cols-12 gap-2 items-center';
            div.innerHTML = `
                <input type="text" name="exerciseName" placeholder="Exercise" class="col-span-4 bg-gray-700 p-2 rounded" value="">
                <input type="text" name="sets" placeholder="Sets" class="col-span-2 bg-gray-700 p-2 rounded" value="">
                <input type="text" name="reps" placeholder="Reps" class="col-span-2 bg-gray-700 p-2 rounded" value="">
                <input type="text" name="weight" placeholder="Weight" class="col-span-3 bg-gray-700 p-2 rounded" value="">
                <button type="button" data-action="remove-row" class="col-span-1 text-red-500 hover:text-red-400" aria-label="Remove exercise">&times;</button>
            `;
            div.querySelector('[name="exerciseName"]').value = data.name || '';
            div.querySelector('[name="sets"]').value = data.sets || '';
            div.querySelector('[name="reps"]').value = data.reps || '';
            div.querySelector('[name="weight"]').value = data.weight || '';
            return div;
        }

        function createBoulderGradeRow(grade = '', count = '') {
            const div = document.createElement('div');
            div.className = 'grid grid-cols-12 gap-2 items-center';
            div.innerHTML = `
                <input type="text" name="boulderGrade" placeholder="e.g., V5" class="col-span-5 bg-gray-700 p-2 rounded" value="">
                <input type="number" name="boulderCount" placeholder="Count" class="col-span-6 bg-gray-700 p-2 rounded" value="">
                <button type="button" data-action="remove-row" class="col-span-1 text-red-500 hover:text-red-400" aria-label="Remove grade">&times;</button>
            `;
            div.querySelector('[name="boulderGrade"]').value = grade;
            div.querySelector('[name="boulderCount"]').value = count;
            return div;
        }
        
        function createRouteRow(data = {}) {
            const div = document.createElement('div');
            div.className = 'grid grid-cols-12 gap-2 items-center';
            div.innerHTML = `
                <input type="text" name="routeGrade" placeholder="Grade" class="col-span-5 bg-gray-700 p-2 rounded" value="">
                <select name="routeOutcome" class="col-span-6 bg-gray-700 p-2 rounded">
                    <option value="Onsight">Onsight</option>
                    <option value="Flash">Flash</option>
                    <option value="Redpoint">Redpoint</option>
                    <option value="Attempt">Attempt</option>
                </select>
                <button type="button" data-action="remove-row" class="col-span-1 text-red-500 hover:text-red-400" aria-label="Remove route">&times;</button>
            `;
            div.querySelector('[name="routeGrade"]').value = data.grade || '';
            div.querySelector('[name="routeOutcome"]').value = data.outcome || 'Attempt';
            return div;
        }

        async function handleFormSubmit(e) {
            e.preventDefault();
            const formData = new FormData(form);
            const id = formData.get('sessionId') || Date.now();
            const session = { id: String(id), date: formData.get('date'), category: formData.get('category'), subcategory: formData.get('subcategory'), sessionRating: Number(formData.get('sessionRating')) || null, generalNotes: formData.get('details'), details: {} };
            
            session.details.duration = Number(formData.get('duration')) || 0;
            
            if (session.category === 'Climbing') {
                session.details.venue = formData.get('venue');
                session.details.warmup = {
                    pullups: { sets: formData.get('warmupPullupsSets'), reps: formData.get('warmupPullupsReps'), weight: formData.get('warmupPullupsWeight') },
                    fingerboard: { sets: formData.get('warmupFingerboardSets'), reps: formData.get('warmupFingerboardReps'), weight: formData.get('warmupFingerboardWeight') }
                };
            }

            const fieldType = trainingConfig[session.category]?.[session.subcategory]?.type;
            switch (fieldType) {
                case 'running':
                    session.details.distance = Number(formData.get('distance'));
                    session.details.pace = formData.get('pace');
                    session.details.avgHR = Number(formData.get('avgHR'));
                    session.details.elevationGain = Number(formData.get('elevationGain'));
                    break;
                case 'weights':
                    session.details.exercises = [];
                    const exerciseNames = formData.getAll('exerciseName');
                    const sets = formData.getAll('sets');
                    const reps = formData.getAll('reps');
                    const weights = formData.getAll('weight');
                    for (let i = 0; i < exerciseNames.length; i++) {
                        if (exerciseNames[i]) {
                            session.details.exercises.push({ name: exerciseNames[i], sets: sets[i], reps: reps[i], weight: weights[i] });
                        }
                    }
                    break;
                case 'bouldering':
                    session.details.grades = {};
                    const boulderGrades = formData.getAll('boulderGrade');
                    const boulderCounts = formData.getAll('boulderCount');
                    for (let i = 0; i < boulderGrades.length; i++) {
                        if (boulderGrades[i] && boulderCounts[i]) {
                            session.details.grades[boulderGrades[i]] = Number(boulderCounts[i]);
                        }
                    }
                    break;
                case 'sport':
                    session.details.type = formData.get('type');
                    session.details.routes = [];
                    const routeGrades = formData.getAll('routeGrade');
                    const routeOutcomes = formData.getAll('routeOutcome');
                    for (let i = 0; i < routeGrades.length; i++) {
                        if (routeGrades[i]) {
                            session.details.routes.push({ grade: routeGrades[i], outcome: routeOutcomes[i] });
                        }
                    }
                    break;
            }
            await saveSession(session);
            switchView('history-view');
        }

        function populateFormForEdit(sessionId) {
            const session = sessions.find(s => s.id === sessionId);
            if (!session) return;
            resetForm();
            sessionIdInput.value = session.id;
            dateInput.value = session.date;
            categorySelect.value = session.category;
            updateSubcategoryDropdown();
            setTimeout(() => {
                subcategorySelect.value = session.subcategory;
                renderDynamicFields(session.details);
                form.querySelector('#details').value = session.generalNotes || '';
                form.querySelector('#sessionRating').value = session.sessionRating || '';
            }, 50);
        }
        
        async function handleWellnessSubmit(e) {
            e.preventDefault();
            const date = wellnessForm.querySelector('#wellness-date').value;
            const wellnessEntry = {
                date,
                sleep: Number(wellnessForm.querySelector('#wellness-sleep').value) || null,
                weight: Number(wellnessForm.querySelector('#wellness-weight').value) || null,
                calories: Number(wellnessForm.querySelector('#wellness-calories').value) || null,
            };
            await saveWellness(wellnessEntry);
            closeModal();
        }

        function openModal(modalId, context = null) {
            modalBackdrop.classList.remove('hidden');
            const modal = document.getElementById(modalId);
            if (modal) {
                if (modalId === 'wellness-modal') {
                    const date = context?.date || new Date().toLocaleDateString('sv-SE');
                    const existing = dailyWellness.find(w => w.date === date);
                    wellnessForm.querySelector('#wellness-date').value = date;
                    wellnessForm.querySelector('#wellness-sleep').value = existing?.sleep || '';
                    wellnessForm.querySelector('#wellness-weight').value = existing?.weight || '';
                    wellnessForm.querySelector('#wellness-calories').value = existing?.calories || '';
                }
                if (modalId === 'day-detail-modal') {
                    document.getElementById('day-detail-title').textContent = new Date(context.date + 'T00:00:00').toLocaleDateString(undefined, { weekday: 'long', month: 'long', day: 'numeric' });
                    const contentEl = document.getElementById('day-detail-content');
                    const daySessions = sessions.filter(s => s.date === context.date);
                    contentEl.innerHTML = '';
                    if (daySessions.length > 0) {
                        daySessions.forEach(s => {
                            const sessionEl = document.createElement('div');
                            sessionEl.className = 'bg-gray-700 p-2 rounded flex justify-between items-center';
                            sessionEl.innerHTML = `<span></span><button data-action="edit-session" data-session-id="${s.id}" class="text-xs py-1 px-2 bg-blue-600 rounded">Edit</button>`;
                            sessionEl.querySelector('span').textContent = `${s.category}: ${s.subcategory}`;
                            contentEl.appendChild(sessionEl);
                        });
                    } else {
                        contentEl.innerHTML = `<p class="text-gray-500">No sessions logged for this day.</p>`;
                    }
                    modal.dataset.date = context.date;
                }
                modal.classList.remove('hidden');
            }
        }
        function closeModal() {
            modalBackdrop.classList.add('hidden');
            wellnessModal.classList.add('hidden');
            dayDetailModal.classList.add('hidden');
        }

        function handleAppClick(e) {
            const target = e.target;
            const action = target.dataset.action || target.closest('[data-action]')?.dataset.action;
            if (!action) return;

            switch (action) {
                case 'logout': signOut(auth); break;
                case 'log-wellness': openModal('wellness-modal'); break;
                case 'close-modal': closeModal(); break;
                case 'prev-period': navigateCalendar(-1); break;
                case 'next-period': navigateCalendar(1); break;
                case 'set-calendar-view': 
                    currentCalendarView = target.dataset.viewType;
                    document.querySelectorAll('.calendar-view-btn').forEach(b => b.classList.remove('active'));
                    target.classList.add('active');
                    renderCalendar();
                    break;
                case 'open-day-detail': 
                    openModal('day-detail-modal', { date: target.closest('[data-date]').dataset.date }); 
                    break;
                case 'add-session-for-date':
                    const date = dayDetailModal.dataset.date;
                    closeModal();
                    switchView('log-view', { date });
                    break;
                case 'edit-session':
                    const sessionId = target.dataset.sessionId || target.closest('[data-session-id]').dataset.sessionId;
                    closeModal();
                    switchView('log-view', { sessionId });
                    break;
                case 'add-exercise':
                    document.getElementById('exercises-list').appendChild(createExerciseRow());
                    break;
                case 'add-boulder-grade':
                    document.getElementById('bouldering-grades').appendChild(createBoulderGradeRow());
                    break;
                case 'add-route':
                    document.getElementById('routes-list').appendChild(createRouteRow());
                    break;
                case 'remove-row':
                    target.closest('div.grid').remove();
                    break;
            }
        }
        
        function navigateCalendar(direction) {
            if (currentCalendarView === 'month') currentCalendarDate.setMonth(currentCalendarDate.getMonth() + direction);
            else if (currentCalendarView === 'week') currentCalendarDate.setDate(currentCalendarDate.getDate() + (7 * direction));
            else if (currentCalendarView === 'day') currentCalendarDate.setDate(currentCalendarDate.getDate() + direction);
            renderCalendar();
        }
        function renderCalendar() {
            if (currentCalendarView === 'month') renderMonthView();
            else if (currentCalendarView === 'week') renderWeekView();
            else if (currentCalendarView === 'day') renderDayView();
        }
        function renderMonthView() {
            calendarContainer.innerHTML = '';
            const year = currentCalendarDate.getFullYear();
            const month = currentCalendarDate.getMonth();
            calendarTitle.textContent = `${currentCalendarDate.toLocaleString('default', { month: 'long' })} ${year}`;

            const grid = document.createElement('div');
            grid.className = 'grid grid-cols-7 gap-1 text-center';
            
            ['S', 'M', 'T', 'W', 'T', 'F', 'S'].forEach(day => {
                const dayEl = document.createElement('div');
                dayEl.className = 'font-bold text-gray-400 text-sm';
                dayEl.textContent = day;
                grid.appendChild(dayEl);
            });

            const firstDayOfMonth = new Date(year, month, 1).getDay();
            const daysInMonth = new Date(year, month + 1, 0).getDate();

            for (let i = 0; i < firstDayOfMonth; i++) {
                grid.insertAdjacentHTML('beforeend', `<div class="calendar-day-month-view other-month"></div>`);
            }

            for (let day = 1; day <= daysInMonth; day++) {
                const dateStr = new Date(year, month, day).toLocaleDateString('sv-SE');
                const daySessions = sessions.filter(s => s.date === dateStr);
                const isToday = new Date().toDateString() === new Date(year, month, day).toDateString();
                
                const dayEl = document.createElement('div');
                dayEl.className = `calendar-day-month-view border border-gray-700 rounded-md p-1 flex flex-col cursor-pointer hover:bg-gray-700 ${isToday ? 'bg-blue-900/50' : ''}`;
                dayEl.dataset.action = 'open-day-detail';
                dayEl.dataset.date = dateStr;

                const dayNumEl = document.createElement('span');
                dayNumEl.className = 'text-xs self-start';
                dayNumEl.textContent = day;
                dayEl.appendChild(dayNumEl);

                const sessionsContainer = document.createElement('div');
                sessionsContainer.className = 'flex-grow mt-1 space-y-1 overflow-y-auto text-left';
                daySessions.forEach(session => {
                    const colors = { Climbing: 'bg-blue-500', Weights: 'bg-red-500', Running: 'bg-green-500', Other: 'bg-gray-400' };
                    const sessionDiv = document.createElement('div');
                    sessionDiv.className = 'flex items-center text-xs';
                    sessionDiv.innerHTML = `<span class="session-dot ${colors[session.category] || 'bg-gray-400'} mr-1"></span><span class="truncate"></span>`;
                    sessionDiv.querySelector('span.truncate').textContent = session.subcategory;
                    sessionsContainer.appendChild(sessionDiv);
                });
                dayEl.appendChild(sessionsContainer);
                grid.appendChild(dayEl);
            }
            calendarContainer.appendChild(grid);
        }
        function renderWeekView() {
            calendarContainer.innerHTML = '';
            const year = currentCalendarDate.getFullYear();
            const month = currentCalendarDate.getMonth();
            const day = currentCalendarDate.getDate();
            const dayOfWeek = currentCalendarDate.getDay();

            const startOfWeek = new Date(year, month, day - dayOfWeek);
            const endOfWeek = new Date(year, month, day - dayOfWeek + 6);
            
            calendarTitle.textContent = `${startOfWeek.toLocaleDateString(undefined, {month:'short', day:'numeric'})} - ${endOfWeek.toLocaleDateString(undefined, {month:'short', day:'numeric'})}`;
            
            const grid = document.createElement('div');
            grid.className = 'space-y-2';

            for (let i = 0; i < 7; i++) {
                const d = new Date(startOfWeek);
                d.setDate(d.getDate() + i);
                const dateStr = d.toLocaleDateString('sv-SE');
                const daySessions = sessions.filter(s => s.date === dateStr);
                const isToday = new Date().toDateString() === d.toDateString();

                const dayEl = document.createElement('div');
                dayEl.className = `p-2 border border-gray-700 rounded-md cursor-pointer hover:bg-gray-700 ${isToday ? 'bg-blue-900/50' : ''}`;
                dayEl.dataset.action = 'open-day-detail';
                dayEl.dataset.date = dateStr;

                const titleEl = document.createElement('p');
                titleEl.className = 'font-semibold text-sm';
                titleEl.textContent = d.toLocaleDateString(undefined, {weekday: 'long', month: 'short', day: 'numeric'});
                dayEl.appendChild(titleEl);

                const sessionsContainer = document.createElement('div');
                sessionsContainer.className = 'mt-2 space-y-2';
                
                if (daySessions.length > 0) {
                    daySessions.forEach(session => {
                        const colors = { Climbing: 'bg-blue-500', Weights: 'bg-red-500', Running: 'bg-green-500', Other: 'bg-gray-400' };
                        const sessionDiv = document.createElement('div');
                        sessionDiv.className = 'flex items-center text-xs bg-gray-800 p-1 rounded';
                        sessionDiv.innerHTML = `<span class="session-dot ${colors[session.category] || 'bg-gray-400'} mr-2"></span><span></span>`;
                        sessionDiv.querySelector('span:last-child').textContent = session.subcategory;
                        sessionsContainer.appendChild(sessionDiv);
                    });
                } else {
                    const noSessionEl = document.createElement('p');
                    noSessionEl.className = 'text-xs text-gray-500';
                    noSessionEl.textContent = 'No sessions';
                    sessionsContainer.appendChild(noSessionEl);
                }
                dayEl.appendChild(sessionsContainer);
                grid.appendChild(dayEl);
            }
            calendarContainer.appendChild(grid);
        }
        function renderDayView() {
            calendarContainer.innerHTML = '';
            calendarTitle.textContent = currentCalendarDate.toLocaleDateString(undefined, { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' });
            const dateStr = currentCalendarDate.toLocaleDateString('sv-SE');

            const daySessions = sessions.filter(s => s.date === dateStr);
            const wellness = dailyWellness.find(w => w.date === dateStr);
            
            const dayContainer = document.createElement('div');
            dayContainer.className = 'space-y-4';

            if (wellness) {
                const wellnessEl = createCard('Wellness', `
                    <div class="flex justify-around text-center text-sm">
                        <div><p class="font-bold text-lg">${wellness.sleep || 'N/A'}</p><p class="text-xs text-gray-400">Sleep (h)</p></div>
                        <div><p class="font-bold text-lg">${wellness.weight || 'N/A'}</p><p class="text-xs text-gray-400">Weight (kg)</p></div>
                        <div><p class="font-bold text-lg">${wellness.calories || 'N/A'}</p><p class="text-xs text-gray-400">Calories</p></div>
                    </div>`);
                dayContainer.appendChild(wellnessEl);
            }

            if (daySessions.length > 0) {
                daySessions.forEach(s => {
                    const sessionEl = document.createElement('div');
                    sessionEl.className = 'bg-gray-800 p-3 rounded-lg';
                    sessionEl.innerHTML = `
                        <div class="flex justify-between items-center">
                            <h3 class="font-semibold"></h3>
                            <button data-action="edit-session" data-session-id="${s.id}" class="text-xs py-1 px-2 bg-blue-600 rounded">Edit</button>
                        </div>
                        <p class="text-sm text-gray-400 mt-1"></p>
                        <p class="text-sm mt-2 italic"></p>`;
                    sessionEl.querySelector('h3').textContent = `${s.category}: ${s.subcategory}`;
                    sessionEl.querySelector('.text-gray-400').textContent = `Rating: ${s.sessionRating || 'N/A'}/10`;
                    if (s.generalNotes) {
                        sessionEl.querySelector('.italic').textContent = `"${s.generalNotes}"`;
                    }
                    dayContainer.appendChild(sessionEl);
                });
            } else {
                dayContainer.innerHTML += `<p class="text-center text-gray-500 py-8">No sessions logged for this day.</p>`;
            }
            
            const addButton = document.createElement('button');
            addButton.dataset.action = 'add-session-for-date';
            addButton.dataset.date = dateStr;
            addButton.className = 'w-full mt-4 py-2 px-4 rounded-md text-sm font-medium text-white bg-blue-600 hover:bg-blue-700';
            addButton.textContent = 'Add Session for this Day';
            dayContainer.appendChild(addButton);
            calendarContainer.appendChild(dayContainer);
        }

        function renderHistoryList() {
            historyList.innerHTML = '';
            if (sessions.length === 0) {
                historyList.innerHTML = `<p class="text-center text-gray-500">No sessions logged yet.</p>`;
                return;
            }
            
            const sortedSessions = [...sessions].sort((a, b) => new Date(b.date) - new Date(a.date));
            
            sortedSessions.forEach(session => {
                const isFuture = new Date(session.date) >= new Date().setHours(0,0,0,0) && session.date !== new Date().toLocaleDateString('sv-SE');
                const div = document.createElement('div');
                div.className = 'bg-gray-800 p-4 rounded-lg shadow-lg flex justify-between items-center';
                div.dataset.sessionId = session.id;
                div.innerHTML = `
                    <div>
                        <p class="font-bold"></p>
                        <p class="text-sm text-gray-400"></p>
                    </div>
                    <button data-action="edit-session" class="p-2 rounded-md bg-gray-700 hover:bg-gray-600">Edit</button>
                `;
                div.querySelector('.font-bold').innerHTML = `${session.category}: ${session.subcategory} ${isFuture ? '<span class="text-xs text-yellow-400 bg-yellow-900/50 px-2 py-1 rounded-full ml-2">PLANNED</span>' : ''}`;
                div.querySelector('.text-gray-400').textContent = new Date(session.date + 'T00:00:00').toLocaleDateString(undefined, { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' });
                historyList.appendChild(div);
            });
        }

        function renderDashboard() {
            Object.values(charts).forEach(chart => chart.destroy());
            dashboardContent.innerHTML = ''; 
            const chartCard = createCard('Training Volume (7-Day Moving Average)', `<canvas id="volumeChart"></canvas>`);
            const sleepCard = createCard('Sleep (Last 30 Days)', `<canvas id="sleepChart"></canvas>`);
            const weightCard = createCard('Weight (Last 30 Days)', `<canvas id="weightChart"></canvas>`);
            const calorieCard = createCard('Calories (Last 30 Days)', `<canvas id="calorieChart"></canvas>`);
            dashboardContent.append(chartCard, sleepCard, weightCard, calorieCard);
            renderMovingAverageChart();
            renderWellnessCharts();
        }
        
        function createCard(title, contentHTML) {
            const card = document.createElement('div');
            card.className = 'bg-gray-800 p-4 rounded-lg shadow-lg';
            card.innerHTML = `<h2 class="text-lg font-bold text-gray-200 mb-4"></h2><div>${contentHTML}</div>`;
            card.querySelector('h2').textContent = title;
            return card;
        }

        function renderMovingAverageChart() {
            const ctx = document.getElementById('volumeChart').getContext('2d');
            const labels = [];
            const dateStringToDayIndex = new Map();
            for (let i = 29; i >= 0; i--) {
                const d = new Date();
                d.setDate(d.getDate() - i);
                const dateString = d.toLocaleDateString('sv-SE');
                labels.push(d.toLocaleDateString(undefined, { month: 'short', day: 'numeric' }));
                dateStringToDayIndex.set(dateString, 29 - i);
            }

            const dailyVolumes = {};
            const categories = Object.keys(trainingConfig);
            categories.forEach(cat => { dailyVolumes[cat] = Array(30).fill(0); });

            sessions.forEach(session => {
                if (dateStringToDayIndex.has(session.date)) {
                    const dayIndex = dateStringToDayIndex.get(session.date);
                    if (dailyVolumes[session.category] && session.details?.duration) {
                        dailyVolumes[session.category][dayIndex] += session.details.duration;
                    }
                }
            });

            const movingAverages = {};
            categories.forEach(cat => {
                movingAverages[cat] = [];
                for (let i = 0; i < 30; i++) {
                    const start = Math.max(0, i - 6);
                    const end = i + 1;
                    const windowSlice = dailyVolumes[cat].slice(start, end);
                    const avg = windowSlice.reduce((a, b) => a + b, 0) / windowSlice.length;
                    movingAverages[cat].push(avg);
                }
            });
            const chartColors = { 
                Climbing: { border: 'rgba(59, 130, 246, 1)', bg: 'rgba(59, 130, 246, 0.1)' },
                Weights: { border: 'rgba(239, 68, 68, 1)', bg: 'rgba(239, 68, 68, 0.1)' },
                Running: { border: 'rgba(34, 197, 94, 1)', bg: 'rgba(34, 197, 94, 0.1)' },
                Other: { border: 'rgba(168, 85, 247, 1)', bg: 'rgba(168, 85, 247, 0.1)' }
            };
            const datasets = categories.map(category => ({
                label: category,
                data: movingAverages[category],
                borderColor: chartColors[category].border,
                backgroundColor: chartColors[category].bg,
                fill: false, tension: 0.3, pointRadius: 2, borderWidth: 2
            }));

            charts['volumeChart'] = new Chart(ctx, {
                type: 'line', data: { labels, datasets },
                options: { responsive: true, plugins: { legend: { position: 'top', labels: { color: '#d1d5db' } }, tooltip: { mode: 'index', intersect: false, callbacks: { label: (c) => `${c.dataset.label}: ${c.parsed.y.toFixed(0)} min (avg)` } } },
                scales: { x: { ticks: { color: '#9ca3af' }, grid: { color: 'rgba(255, 255, 255, 0.1)' } }, y: { beginAtZero: true, ticks: { color: '#9ca3af' }, grid: { color: 'rgba(255, 255, 255, 0.1)' }, title: { display: true, text: '7-Day Avg. Volume (minutes)', color: '#d1d5db' } } }
                }
            });
        }

        function renderWellnessCharts() {
            const dateMap = new Map();
            const labels = [];
            for (let i = 29; i >= 0; i--) {
                const d = new Date();
                d.setDate(d.getDate() - i);
                const dateString = d.toLocaleDateString('sv-SE');
                labels.push(d.toLocaleDateString(undefined, { month: 'short', day: 'numeric' }));
                dateMap.set(dateString, { index: 29 - i, sleep: null, weight: null, calories: null });
            }

            dailyWellness.forEach(w => {
                if (dateMap.has(w.date)) {
                    const entry = dateMap.get(w.date);
                    entry.sleep = w.sleep;
                    entry.weight = w.weight;
                    entry.calories = w.calories;
                }
            });
            
            const sortedEntries = [...dateMap.values()].sort((a,b) => a.index - b.index);
            const sleepData = sortedEntries.map(e => e.sleep);
            const weightData = sortedEntries.map(e => e.weight);
            const calorieData = sortedEntries.map(e => e.calories);

            createLineChart('sleepChart', 'Sleep (hours)', labels, sleepData, 'rgba(110, 231, 183, 1)');
            createLineChart('weightChart', 'Weight (kg)', labels, weightData, 'rgba(129, 140, 248, 1)');
            createLineChart('calorieChart', 'Calories (kcal)', labels, calorieData, 'rgba(251, 146, 60, 1)');
        }

        function createLineChart(canvasId, label, labels, data, color) {
            if (charts[canvasId]) charts[canvasId].destroy();
            const ctx = document.getElementById(canvasId).getContext('2d');
            charts[canvasId] = new Chart(ctx, {
                type: 'line',
                data: { labels, datasets: [{ label, data, borderColor: color, backgroundColor: color.replace('1)', '0.1)'), fill: true, tension: 0.3, pointRadius: 2, borderWidth: 2, spanGaps: true }] },
                options: { responsive: true, plugins: { legend: { display: false } }, scales: { y: { beginAtZero: false, ticks: { color: '#9ca3af' }, grid: { color: 'rgba(255, 255, 255, 0.1)' } }, x: { ticks: { color: '#9ca3af' }, grid: { display: false } } } }
            });
        }
        
        initialize();
    });
    </script>
</body>
</html>
